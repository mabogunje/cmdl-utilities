'''
@author: Damola Mabogunje
@contact: damola@mabogunje.net
@summary: An automated sick notification system -  sends sick notices by email
'''

import argparse;
import smtplib;
import sys;

from email.mime.text import MIMEText;
from time import strftime;
from datetime import datetime;

from config import *;
from symptoms import *;


def parse_symptom(args):
    '''
    Make Symptom from arguments
    '''

    if args.severity:
        if len(args.severity) > 1:
            args.severity.index('-');
            values = [ int(x) for x in args.severity.split('-') ];

            assert (int(values[0]) >= SEVERITY.MILD) and (int(values[len(values)-1]) <= SEVERITY.SEVERE);
            return Symptom( (values[0], values[len(values)-1]), args.duration);
        else:
            return Symptom( (int(args.severity), int(args.severity)), args.duration);
    else:
        return Symptom();

def compose_email(symptom, msg):
    email = '''============================\nSEVERITY\n============================
*Status: %(status)s for %(duration)s
*Predicted: %(forecast)s

=============================\nRECOVERY TIME\n=============================\n
%(time)s

=============================\nATTENDANCE\n=============================\n
%(rsvp)s

==============================\nEXTRA NOTES\n==============================\n
%(msg)s

Sincerely,
%(user)s

P.S This message was generated by SS_NOTIFY
''';
    
    values = { "status": symptom.status(),
               "duration": symptom.duration(),
               "forecast": symptom.forecast(),
               "time": symptom.respite().capitalize(),
               "rsvp": symptom.effect(),
               "msg": msg,
               "user": CONFIG.get('USER')
             };

    email = MIMEText(email % values);
    email['Subject'] = "Sick Notice (%s)" % datetime.today().strftime("%h %d %Y");
    email['From'] = CONFIG.get('EMAIL');
    email['To'] = ', '.join(args.to);

    return email;

def notify(email, addresses):

    mailer = smtplib.SMTP(CONFIG.get('SERVER'), CONFIG.get('PORT'));
    mailer.ehlo();
    mailer.starttls();
    mailer.ehlo();
    mailer.login(CONFIG.get('USERNAME'), CONFIG.get('PASSWORD'));
    mailer.sendmail(email['From'], addresses, email.as_string());
    mailer.close();

    print "SICK NOTIFICATION SENT";


if __name__ =='__main__':
    '''
    Processes command-line arguments and email's a sick notification
    '''
    
    parser = argparse.ArgumentParser(description='Process notification arguments');

    parser.add_argument('-s', '--severity', metavar='1-4', nargs='?', 
                        default=str(SEVERITY.MEDIUM),
                        help='Severity of the symptom'
                       );

    parser.add_argument('-t', '--duration', metavar='TIME', type=int, nargs='?',
                        default=1,
                        help='Duration of the symptom. If TIME < 0, duration <= abs(TIME), ' +
                        'else duration >= TIME'
                       );

    parser.add_argument('-m', '--msg', nargs='?', default='NONE', help='Extra notes');
    parser.add_argument('to', nargs='+', help='Addresses to notify');

    args = parser.parse_args();
    
    try:
        symptom = parse_symptom(args);
    except IndexError:
        print "Severity ranges must be of the format 'min-max' i.e 1-2";
        sys.exit();
    except AssertionError:
        print "Severity out of range";
        sys.exit();
    else:
        email = compose_email(symptom, args.msg);
        
    try:
        notify(email, args.to);
    except:
        print 'Unable to send email';

